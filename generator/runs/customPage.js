const path = require('path');
const fs = require('fs');
const fsp = require('fs/promises');
const camelCase = require('camelcase');
const prependFile = require('prepend-file');
const Logger = require('../utils/logger');
const { userDataRoot } = require('../utils/path');
const { getCompEntryCode } = require('../utils/generate');

const logger = new Logger('custom-page');

const customPageRoot = path.resolve(userDataRoot, './pages');
const targetPath = path.resolve(customPageRoot, './fragy.entry.js');

const getPageCompName = (fileName) => {
  if (fileName.endsWith('.js')) {
    return camelCase(fileName.replace('.js', ''));
  }
  if (fileName.endsWith('.vue')) {
    return camelCase(fileName.replace('.vue', ''));
  }
};

// Only collect files in the top layer
const collectPageFiles = async () => {
  if (!fs.existsSync(customPageRoot)) {
    return [];
  }
  const collectRes = [];
  const dirInfo = await fsp.readdir(customPageRoot);
  await Promise.all(
    dirInfo.map(async (fileName) => {
      const filePath = path.resolve(customPageRoot, fileName);
      const stat = await fsp.stat(filePath);
      const relativePath = `./${fileName}`;
      if (stat.isDirectory()) {
        // Skip any directory
        return;
      }
      if (!filePath.endsWith('.vue') && !filePath.endsWith('.js')) {
        // skip file that not vue or js (page might be something bundled)
        return;
      }
      return collectRes.push({
        relativePath: `./${relativePath}`,
        fileName,
        compName: getPageCompName(filePath),
      });
    }),
  );
};

const generateEntry = async () => {
  if (!fs.existsSync(customPageRoot) || !fs.statSync(customPageRoot).isDirectory()) {
    logger.info('No custom components, skipped generating the entry.');
    return;
  }
  const customIndexPath = path.resolve(customPageRoot, './index.js');
  try {
    if (fs.existsSync(targetPath)) {
      await fsp.rm(targetPath, { force: true });
    }
  } catch (err) {
    logger.error('Failed to remove the existed entry file.', err);
    return;
  }
  try {
    if (fs.existsSync(customIndexPath)) {
      // just do a copy
      await fsp.cp(customIndexPath, targetPath);
      await prependFile(targetPath, '// DO NOT DELETE THIS FILE, auto generated by Fragy.\n');
    } else {
      // collect custom component and generate index
      const collected = await collectPageFiles();
      const code = getCompEntryCode(collected);
      if (!code) {
        logger.info('No custom components, skipped generating the entry.');
        return;
      }
      await fsp.writeFile(targetPath, code, { encoding: 'utf-8' });
    }
  } catch (err) {
    logger.error('Failed to generate the index file of custom components.', err);
  }
};

module.exports = {
  name: 'customPage',
  action: () => generateEntry(),
};
